{"version":3,"sources":["constants/data/index.js","components/navbar_component/index.js","components/toaster_component/index.js","components/input_component/index.js","components/header_component/index.js","components/alert_component/index.js","components/map_component/index.js","constants/api_url/index.js","components/location_component/index.js","components/footer_component/index.js","services/getUrlWeatherByCity.js","services/transformWeather.js","components/App.js","serviceWorker.js","index.js"],"names":["constants_data","application_name","button_reference","placeholder","search_button","description","linkedin","instagram","twitter","Navigation","socialNetworkRedirect","social","console","log","window","open","data","location","href","react_default","a","createElement","className","onClick","ToasterComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUpdateCity","city","callSearchAgainCity","handleDeleteCity","index","callDeleteCity","renderLastCities","cities","length","slice","state","_this2","lastCities","map","item","key","Component","InputSearch","validateClearButton","event","target","value","setState","disableClearButton","clearForm","callClearFromHeader","handleKeyPress","callbackFromHeader","_this$state","type","name","id","onKeyPress","onChange","autoFocus","required","disabled","Header","getCityFromInput","searchCityByInput","clearCityData","resetCitySearch","getCityDetailsAgain","serchCityAgain","getDeleteCity","deleteCity","historyData","input_component","toaster_component","AlertComponent","role","mapStyles","width","height","MapContainer","_Component","inherits","createClass","_this$props","latitude","longitude","dist","google","zoom","style","initialCenter","lat","lng","GoogleApiWrapper","apiKey","Location","map_component","country","humidity","temperature","pressure","temperature_max","temperature_min","wind","Footer","getUrlWeatherByCity","concat","getTemp","kelvin","convert","from","to","toFixed","transformWeather","weather_data","_weather_data$main","main","temp","temp_max","temp_min","coord","lon","speed","sys","App","validateCityHint","list","validator","getCityForecastDetails","api_weather","listHint","fetch","then","resolve","json","cod","sessionStorage","setItem","JSON","stringify","newWeather","push","visible","setTimeout","catch","error","getLastCityForecastDetails","deleteCityHistory","splice","findIndex","parse","getItem","listHints","alert_component","navbar_component","header_component","location_component","footer_component","Boolean","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33136152.chunk.js","sourcesContent":["export default {\n    navigation: {\n        application_name: 'forecast application',\n        button_reference: 'follow me !'\n    },\n    input_search: {\n        placeholder: \"Are you looking for a estimated forecast in your location ?\",\n        search_button: 'reset city desire'\n    },\n    error_message: {\n        description: 'The city name doesn´t exist in our database =( '\n    },\n    social: {\n        linkedin: 'https://www.linkedin.com/in/wilfrido-bonett-paez',\n        instagram: 'https://www.instagram.com/bonett2',\n        twitter: 'https://twitter.com/wbonett10'\n    }\n}","import React from 'react';\nimport data from './../../constants/data';\nimport './style.scss';\n\nconst Navigation = () => {\n\n    const socialNetworkRedirect = (social) => {\n        console.log(social);\n        switch (social) {\n            case 'instagram':\n                return window.open(data.social.instagram);\n            case 'linkedin':\n                return window.open(data.social.linkedin);\n            case 'logo':\n                return window.location.href;\n            default:\n                return window.open(data.social.twitter);\n        }\n    }\n\n    return (\n        <nav className=\"navbar navbar-expand-lg fixed-top\">\n            <div className=\"container\">\n                <a className=\"brand\" onClick={() => socialNetworkRedirect('logo')}>{data.navigation.application_name}</a>\n                <div className=\"social text-right\">\n                    <a onClick={() => socialNetworkRedirect('instagram')} className=\"fa fa-instagram\"></a>\n                    <a onClick={() => socialNetworkRedirect('linkedin')} className=\"fa fa-linkedin\"></a>\n                    <a onClick={() => socialNetworkRedirect('twitter')} className=\"fa fa-twitter\"></a>\n                </div>\n            </div>\n        </nav>\n    )\n};\n\nexport default Navigation;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './style.scss';\n\nclass ToasterComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    handleUpdateCity = (city) => {\n        this.props.callSearchAgainCity(city)\n    };\n\n    handleDeleteCity = (index, city) => {\n        const data = {\n            index,\n            city\n        }\n        this.props.callDeleteCity(data);\n    };\n\n    renderLastCities = (cities) => {\n        if (cities.length > 5) {\n            return cities.slice(cities.length - 5, cities.length);\n        } else {\n            return cities;\n        }\n    }\n\n    render() {\n        const { cities } = this.props;\n        const lastCities = this.renderLastCities(cities);\n        return (\n            <div>\n                {\n                    lastCities.map((item, index) => {\n                        return (\n                            <div className=\"card text-center\" key={index}>\n                                <div className=\"card-body\">\n                                    <h5 className=\"card-title\" onClick={() => this.handleUpdateCity(item)}>{item}</h5>\n                                    <a className=\"btn btn-primary\" onClick={() => this.handleDeleteCity(index, item)}><i className=\"fa fa-close\"></i></a>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nToasterComponent.propTypes = {\n    cities: PropTypes.array,\n    callDeleteCity: PropTypes.func,\n    callSearchAgainCity: PropTypes.func\n}\n\nexport default ToasterComponent;\n","import React, { Component } from 'react';\nimport data from './../../constants/data';\nimport './style.scss';\n\nclass InputSearch extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            disableClearButton: true\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    validateClearButton = (event) => {\n        if (event.target.value.length > 0) {\n            this.setState({ disableClearButton: false, value: event.target.value });\n        } else {\n            this.setState({ disableClearButton: true, value: '' });\n        }\n    }\n\n    clearForm = () => {\n        this.setState({ value: '', disableClearButton: true });\n        this.props.callClearFromHeader('');\n    }\n\n    handleKeyPress = (event) => {\n        // eslint-disable-next-line\n        if (event.key == 'Enter') {\n            this.props.callbackFromHeader(event.target.value);\n        }\n    };\n\n    render() {\n        const { disableClearButton, value } = this.state;\n        return (\n            <div className=\"col-12 col-md-12 mb-2 mb-md-0\">\n                <input type=\"text\" name=\"name\" className=\"input-location\" id=\"name\" value={value} onKeyPress={this.handleKeyPress} onChange={this.validateClearButton} autoFocus required />\n                <label><span>{data.input_search.placeholder}</span></label>\n                <button type=\"button\" className=\"btn btn-primary\" disabled={disableClearButton} onClick={this.clearForm} >{data.input_search.search_button}</button>\n            </div>\n        )\n    }\n}\n\n\nexport default InputSearch;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ToasterComponent from '../toaster_component';\nimport InputSearch from '../input_component';\nimport './style.scss';\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    getCityFromInput = (city) => {\n        this.props.searchCityByInput(city);\n    }\n\n    clearCityData = () => {\n        this.props.resetCitySearch('');\n    }\n\n    getCityDetailsAgain = (city) => {\n        this.props.serchCityAgain(city);\n    }\n\n    getDeleteCity = (data) => {\n        this.props.deleteCity(data);\n    }\n\n    render() {\n        const { historyData } = this.props;\n        return (\n            <header className=\"masthead-content text-white text-center\">\n                <div className=\"overlay\"></div>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-10 col-lg-8 col-xl-7 mx-auto\">\n                            <InputSearch callbackFromHeader={this.getCityFromInput} callClearFromHeader={this.clearCityData} />\n                        </div>\n                    </div>\n                    <div className=\"row toaster-content\">\n                        {historyData !== null ? <ToasterComponent cities={historyData} callDeleteCity={this.getDeleteCity} callSearchAgainCity={this.getCityDetailsAgain} /> : null}\n                    </div>\n                </div>\n            </header>\n        )\n    }\n}\n\nHeader.propTypes = {\n    historyData: PropTypes.array,\n    searchCityByInput: PropTypes.func,\n    resetCitySearch: PropTypes.func,\n    serchCityAgain: PropTypes.func,\n    deleteCity: PropTypes.func\n}\n\nexport default Header;","import React from 'react';\nimport data from './../../constants/data';\nimport './style.scss';\n\nconst AlertComponent = () => (\n    <div className=\"alert alert-warning alert-dismissible fade show text-center\" role=\"alert\">\n        <strong>Ops!</strong> {data.error_message.description}\n    </div>\n);\n\nexport default AlertComponent;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport { api_key_map } from './../../constants/api_url';\n\nconst mapStyles = {\n    width: '100%',\n    height: '100%'\n};\n\nexport class MapContainer extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        const { latitude, longitude } = this.props;\n        return (\n            <Map\n                google={this.props.google}\n                zoom={12}\n                style={mapStyles}\n                initialCenter={{\n                    lat: latitude,\n                    lng: longitude\n                }}\n            />\n        );\n    }\n}\n\nMapContainer.propTypes = {\n    longitude: PropTypes.number.isRequired,\n    latitude: PropTypes.number.isRequired\n}\n\nexport default GoogleApiWrapper({\n    apiKey: api_key_map\n})(MapContainer);","export const api_key = '50c2553a4684fe575761d6b2f6f7203f';\nexport const url_base_weather = 'http://api.openweathermap.org/data/2.5/weather';\nexport const url_base_forecast = 'http://api.openweathermap.org/data/2.5/forecast';\nexport const api_key_map = 'AIzaSyD22eQXfI0Hjciax0946NkjGCsID4eA6h0';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport GoogleApiWrapper from './../map_component';\nimport './style.scss';\n\nclass Location extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        const { data } = this.props;\n        return (\n            <div className=\"location-content\">\n                <div className=\"container\">\n                    <div className=\"col-12\">\n                        <div className=\"card card-location customize\" >\n                            <div className=\"row\">\n                                <div className=\"col-7\">\n                                    <GoogleApiWrapper latitude={data.latitude} longitude={data.longitude} />\n                                </div>\n                                <div className=\"col-5\">\n                                    <div className=\"card-body\">\n                                        <h5 className=\"card-title text-center\">{data.name} - {data.country}</h5>\n                                        <h6 className=\"card-item\">Humidity: <span>{data.humidity} %</span></h6>\n                                        <h6 className=\"card-item\">Temperature: <span>{data.temperature} Cº</span></h6>\n                                        <h6 className=\"card-item\">Pressure: <span>{data.pressure}</span></h6>\n                                        <h6 className=\"card-item\">Max Temperature: <span>{data.temperature_max} Cº</span></h6>\n                                        <h6 className=\"card-item\">Min Temperature: <span>{data.temperature_min} Cº</span></h6>\n                                        <h6 className=\"card-item\">Wind: <span>{data.wind}</span></h6>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n};\n\nLocation.propTypes = {\n    data: PropTypes.shape({\n        humidity: PropTypes.number.isRequired,\n        temperature: PropTypes.string.isRequired,\n        wind: PropTypes.string.isRequired,\n        country: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        temperature_max: PropTypes.string.isRequired,\n        temperature_min: PropTypes.string.isRequired,\n        pressure: PropTypes.number.isRequired\n    }),\n}\n\nexport default Location;","import React from 'react';\nimport './style.scss';\n\nconst Footer = () => (\n    <footer className=\"text-center\">\n        <div className=\"container\">\n            <h4 className=\"footer-text\">made with <i className=\"fa fa-heart with-love heart-color\"></i> in Colombia by: Wilfrido Bonett Paez</h4>\n        </div>\n    </footer>\n);\n\nexport default Footer;","import { url_base_weather, api_key } from '../constants/api_url'\n\nconst getUrlWeatherByCity = city => {\n    return `${url_base_weather}?q=${city}&appid=${api_key}`;\n};\n\nexport default getUrlWeatherByCity;","import convert from 'convert-units';\n\nconst getTemp = kelvin => {\n    return convert(kelvin).from(\"K\").to(\"C\").toFixed(0);\n}\n\n\nconst transformWeather = weather_data => {\n    const { humidity, temp, pressure, temp_max, temp_min } = weather_data.main;\n    const longitude = weather_data.coord.lon;\n    const latitude = weather_data.coord.lat;\n    const { speed } = weather_data.wind;\n    const temperature_max = getTemp(temp_max);\n    const temperature_min = getTemp(temp_min);\n    const temperature = getTemp(temp);\n    const name = weather_data.name;\n    const country = weather_data.sys.country;\n\n    const data = {\n        humidity,\n        temperature,\n        pressure,\n        temperature_max,\n        temperature_min,\n        longitude,\n        latitude,\n        name,\n        country,\n        wind: `${speed} m/s`,\n    }\n\n    return data;\n}\n\nexport default transformWeather;","import React, { Component } from 'react';\nimport Navigation from './navbar_component';\nimport Header from './header_component';\nimport AlertComponent from './alert_component';\nimport Location from './location_component';\nimport Footer from './footer_component';\n\nimport getUrlWeatherByCity from './../services/getUrlWeatherByCity';\nimport transformWeather from './../services/transformWeather'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: null,\n      data: {},\n      visible: false,\n      list: {}\n    }\n  }\n\n  componentDidMount() {\n    sessionStorage.setItem(\"cities\", JSON.stringify([]));\n    this.setState({\n      list: JSON.parse(sessionStorage.getItem(\"cities\"))\n    })\n  }\n\n  validateCityHint = (list, city) => {\n    let validator;\n    for (let index = 0; index < list.length; index++) {\n      if (list[index] === city) {\n        validator = true;\n        break;\n      } else {\n        validator = false;\n      }\n    }\n    return validator;\n  }\n\n  getCityForecastDetails = (city) => {\n    const api_weather = getUrlWeatherByCity(city);\n    let listHint = this.state.list;\n    fetch(api_weather)\n      .then(resolve => {\n        return resolve.json();\n      }).then(data => {\n        if (data.cod === 200) {\n          if (listHint === null) {\n            sessionStorage.setItem(\"cities\", JSON.stringify(city));\n            let newWeather = transformWeather(data);\n            this.setState({\n              data: newWeather,\n              city\n            })\n          } else {\n            const result = this.validateCityHint(listHint, city);\n            if (!result) {\n              listHint.push(city);\n              sessionStorage.setItem(\"cities\", JSON.stringify(listHint));\n              let newWeather = transformWeather(data);\n              this.setState({\n                data: newWeather,\n                city\n              })\n            } else {\n              let newWeather = transformWeather(data);\n              this.setState({\n                data: newWeather,\n                city\n              })\n            }\n          }\n        } else {\n          this.setState({ visible: true }, () => {\n            window.setTimeout(() => {\n              this.setState({ visible: false })\n            }, 3000)\n          });\n        }\n      }).catch(error => {\n        console.log('Error:', error);\n      })\n  }\n\n  getLastCityForecastDetails = (city) => {\n    const api_weather = getUrlWeatherByCity(city);\n    fetch(api_weather)\n      .then(resolve => {\n        return resolve.json();\n      }).then(data => {\n        let newWeather = transformWeather(data);\n        this.setState({\n          data: newWeather,\n          city\n        })\n      }).catch(error => {\n        console.log('Error:', error);\n      })\n  }\n\n  deleteCityHistory = (data) => {\n    let listHint = this.state.list;\n    listHint.splice(listHint.findIndex((city, index) => index === data.index && city === data.city), 1);\n    sessionStorage.setItem(\"cities\", JSON.stringify(listHint));\n    this.setState({ city: null, list: listHint })\n  }\n\n  clearForm = () => {\n    this.setState({\n      city: null,\n      visible: false,\n      data: {}\n    })\n  }\n\n  render() {\n    const { city, data, visible } = this.state;\n    const listHints = JSON.parse(sessionStorage.getItem(\"cities\"));\n    return (\n      <div className=\"app-content\">\n        {visible ? <AlertComponent /> : null}\n        <Navigation />\n        <Header\n          searchCityByInput={this.getCityForecastDetails}\n          resetCitySearch={this.clearForm}\n          serchCityAgain={this.getLastCityForecastDetails}\n          historyData={listHints}\n          deleteCity={this.deleteCityHistory} />\n        <div className=\"wrapper-content\">\n          {\n            city ? <Location data={data} /> : null\n          }\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}